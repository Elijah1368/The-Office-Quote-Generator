{"ast":null,"code":"import Andy from '../assets/Andy.png';\nimport Angela from '../assets/Angela.png';\nimport Dwight from '../assets/Dwight.png';\nimport Jim from '../assets/Jim.png';\nimport Kelly from '../assets/Kelly.png';\nimport Michael from '../assets/Michael.png';\nimport Pam from '../assets/Pam.png';\nimport Stanley from '../assets/Stanley.png';\nimport getXmlQuotes from '../components/test';\nexport const fetchQuotes = (...urls) => dispatch => {\n  let promises = gatherPromises(urls);\n  dispatchPromises(dispatch, promises);\n};\n\nfunction gatherPromises(urls) {\n  let promises = [getXmlQuotes()];\n  urls.map(url => promises.push(asyncFetch(url)));\n  return promises;\n}\n\nfunction asyncFetch(url) {\n  return fetch(url).then(response => {\n    if (!response.ok) throw Error(response.statusText);\n    return response.json();\n  }).then(data => {\n    return listToObject(data);\n  }).catch(error => {\n    console.log(error);\n  });\n}\n\nfunction listToObject(quotes) {\n  let result = {};\n  quotes.map(quote => {\n    let key = nameOrCharacter(quote);\n    let property = quote[key].substr(0, quote[key].indexOf(' '));\n\n    if (result.hasOwnProperty(property)) {\n      return result[property].push(quote.quote);\n    } else {\n      return result[property] = [quote.quote];\n    }\n  });\n  return {\n    quotes: result\n  };\n}\n\nfunction nameOrCharacter(quote) {\n  if (quote.hasOwnProperty('name')) {\n    return 'name';\n  } else {\n    return 'character';\n  }\n}\n\nfunction dispatchPromises(dispatch, promises) {\n  Promise.all(promises).then(results => {\n    let payload = mergeIntoOneQuoteObject(results);\n    console.log(payload['Andy']);\n    dispatch({\n      type: 'FETCH_QUOTES',\n      payload\n    });\n  });\n}\n\nfunction mergeIntoOneQuoteObject(quoteObjectList) {\n  let uniqueKeys = getUniqueKeys(quoteObjectList);\n  let result = groupQuotesIntoSameCharacters(uniqueKeys, quoteObjectList);\n  return result;\n}\n\nfunction groupQuotesIntoSameCharacters(uniqueKeys, quoteObjectList) {\n  let result = {};\n\n  for (let key of uniqueKeys) {\n    for (let quoteObject of quoteObjectList) {\n      if (quoteObject.hasOwnProperty(key)) {\n        if (result.hasOwnProperty(key)) {\n          result[key].concat(quoteObject[key]);\n        } else {\n          result[key] = [quoteObject[key]];\n        }\n      }\n    }\n  }\n\n  return result;\n}\n\nfunction getUniqueKeys(objects) {\n  let keys = [];\n\n  for (let object of objects) {\n    keys.concat(Object.keys(object));\n  }\n\n  return [...new Set(keys)];\n}\n\nexport const getImages = () => dispatch => {\n  let images = [Andy, Angela, Dwight, Jim, Kelly, Michael, Pam, Stanley];\n  dispatch({\n    type: 'GET_IMAGES',\n    payload: images\n  });\n};\nexport const onSelect = key => dispatch => {\n  dispatch({\n    type: 'SELECT',\n    payload: key\n  });\n};","map":{"version":3,"sources":["C:/Users/Elija/Projects/quote-generator/src/actions/index.js"],"names":["Andy","Angela","Dwight","Jim","Kelly","Michael","Pam","Stanley","getXmlQuotes","fetchQuotes","urls","dispatch","promises","gatherPromises","dispatchPromises","map","url","push","asyncFetch","fetch","then","response","ok","Error","statusText","json","data","listToObject","catch","error","console","log","quotes","result","quote","key","nameOrCharacter","property","substr","indexOf","hasOwnProperty","Promise","all","results","payload","mergeIntoOneQuoteObject","type","quoteObjectList","uniqueKeys","getUniqueKeys","groupQuotesIntoSameCharacters","quoteObject","concat","objects","keys","object","Object","Set","getImages","images","onSelect"],"mappings":"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","sourcesContent":["import Andy from '../assets/Andy.png';\r\nimport Angela from '../assets/Angela.png';\r\nimport Dwight from '../assets/Dwight.png';\r\nimport Jim from '../assets/Jim.png';\r\nimport Kelly from '../assets/Kelly.png';\r\nimport Michael from '../assets/Michael.png';\r\nimport Pam from '../assets/Pam.png';\r\nimport Stanley from '../assets/Stanley.png';\r\nimport getXmlQuotes from '../components/test'\r\n\r\nexport const fetchQuotes = (...urls) => dispatch => {\r\n    let promises = gatherPromises(urls);\r\n    dispatchPromises(dispatch, promises);\r\n};\r\n\r\n\r\n\r\nfunction gatherPromises(urls){\r\n    let promises = [getXmlQuotes()];\r\n    urls.map((url) => promises.push(asyncFetch(url)));\r\n    return promises;\r\n}\r\n\r\nfunction asyncFetch(url){\r\n    return (\r\n        fetch(url)\r\n        .then(response => {\r\n            if (!response.ok) throw Error(response.statusText);\r\n            return response.json();\r\n        })\r\n        .then(data => {\r\n            return listToObject(data);\r\n        })\r\n        .catch(error=> {\r\n            console.log(error);\r\n        })\r\n    );\r\n}\r\n\r\nfunction listToObject(quotes){\r\n    let result = {};\r\n    quotes.map(quote => {\r\n        let key = nameOrCharacter(quote);\r\n        let property = quote[key].substr(0, quote[key].indexOf(' '));\r\n        if (result.hasOwnProperty(property)){\r\n            return result[property].push(quote.quote);\r\n        } else {\r\n            return result[property] = [quote.quote];\r\n        }\r\n    });\r\n    return {quotes: result};\r\n}\r\n\r\n\r\nfunction nameOrCharacter(quote){\r\n    if (quote.hasOwnProperty('name')){\r\n        return 'name';\r\n    } else {\r\n        return 'character';\r\n    }\r\n}\r\n\r\nfunction dispatchPromises(dispatch, promises){\r\n    Promise.all(promises).then((results) =>{\r\n        let payload = mergeIntoOneQuoteObject(results);\r\n        console.log(payload['Andy']);\r\n        dispatch({type: 'FETCH_QUOTES', payload});\r\n    })\r\n}\r\n\r\nfunction mergeIntoOneQuoteObject(quoteObjectList){\r\n    let uniqueKeys = getUniqueKeys(quoteObjectList);\r\n    let result = groupQuotesIntoSameCharacters(uniqueKeys, quoteObjectList);\r\n\r\n    return result;\r\n}\r\n\r\nfunction groupQuotesIntoSameCharacters(uniqueKeys, quoteObjectList){\r\n    let result = {};\r\n    for (let key of uniqueKeys){\r\n        for (let quoteObject of quoteObjectList){\r\n            if (quoteObject.hasOwnProperty(key)){\r\n                if (result.hasOwnProperty(key)) {\r\n                    result[key].concat(quoteObject[key]);\r\n                } else {\r\n                    result[key] = [quoteObject[key]];\r\n                }\r\n            } \r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction getUniqueKeys(objects){\r\n    let keys = [];\r\n    for (let object of objects){\r\n        keys.concat(Object.keys(object));\r\n    }\r\n    return [...new Set(keys)];\r\n}\r\n\r\nexport const getImages = () => dispatch => {\r\n    let images = [Andy, Angela, Dwight, Jim, Kelly, Michael, Pam, Stanley];\r\n    dispatch({type: 'GET_IMAGES', payload: images});\r\n}\r\n\r\nexport const onSelect = (key) => dispatch => {\r\n    dispatch({type: 'SELECT', payload: key});\r\n}"]},"metadata":{},"sourceType":"module"}