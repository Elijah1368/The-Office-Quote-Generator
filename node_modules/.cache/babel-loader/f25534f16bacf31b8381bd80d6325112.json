{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elija\\\\Projects\\\\quote-generator\\\\src\\\\components\\\\CardMenu.js\";\nimport React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport '../stylesheets/style.css';\nimport { fetchQuotes, getImages, flipCard, onSelect } from '../actions/index';\nimport QuoteCard from './QuoteCard';\nimport ScrollMenu from 'react-horizontal-scrolling-menu';\nimport LoadingScreen from './LoadingScreen';\nimport ReactCardFlip from 'react-card-flip';\nimport { ArrowLeft, ArrowRight } from './Arrow';\nexport class CardMenu extends Component {\n  constructor(...args) {\n    super(...args);\n    this.style = {};\n  }\n\n  render() {\n    if (this.props.quotes['Andy'] && this.props.images) {\n      return React.createElement(ScrollMenu, {\n        data: this.getCards(),\n        arrowLeft: ArrowLeft,\n        arrowRight: ArrowRight,\n        selected: this.props.selected,\n        onSelect: this.onSelect,\n        menuStyle: this.style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      });\n    } else {\n      return React.createElement(LoadingScreen, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      });\n    }\n  }\n\n  getCards() {\n    return this.props.images.map(url => {\n      let name = extractName(url);\n      return React.createElement(\"div\", {\n        key: name,\n        onDragStart: e => e.preventDefault(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(ReactCardFlip, {\n        isFlipped: this.props.isCardFlipped,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        key: \"front\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: url,\n        alt: name,\n        id: \"front\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        key: \"back\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(QuoteCard, {\n        quotes: this.props.quotes[name],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }))));\n    });\n  }\n\n  handleClick(e) {\n    e.preventDefault();\n  }\n\n  componentDidMount() {\n    this.props.fetchQuotes('https://raw.githubusercontent.com/anderskristo/the-office-quotes/master/src/quotes/all.json', 'https://raw.githubusercontent.com/yoscheherazade/the-office-quotes-json/master/quotes.json');\n    this.props.getImages();\n  }\n\n}\n\nfunction extractName(url) {\n  let fileName = url.substr(url.lastIndexOf('/') + 1);\n  let name = fileName.substr(0, fileName.indexOf('.'));\n  return name;\n}\n\nconst mapStateToProps = state => ({\n  quotes: state.quotes.data,\n  images: state.images.data,\n  isCardFlipped: state.cards.isFlipped,\n  selected: state.cards.selected\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  fetchQuotes,\n  getImages,\n  flipCard,\n  onSelect\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardMenu);","map":{"version":3,"sources":["C:/Users/Elija/Projects/quote-generator/src/components/CardMenu.js"],"names":["React","Component","bindActionCreators","connect","fetchQuotes","getImages","flipCard","onSelect","QuoteCard","ScrollMenu","LoadingScreen","ReactCardFlip","ArrowLeft","ArrowRight","CardMenu","style","render","props","quotes","images","getCards","selected","map","url","name","extractName","e","preventDefault","isCardFlipped","handleClick","componentDidMount","fileName","substr","lastIndexOf","indexOf","mapStateToProps","state","data","cards","isFlipped","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport '../stylesheets/style.css';\r\nimport { fetchQuotes, getImages, flipCard, onSelect } from '../actions/index';\r\nimport QuoteCard from './QuoteCard';\r\nimport ScrollMenu from 'react-horizontal-scrolling-menu';\r\nimport LoadingScreen from './LoadingScreen';\r\nimport ReactCardFlip from 'react-card-flip';\r\nimport {ArrowLeft, ArrowRight} from './Arrow';\r\n\r\n\r\nexport class CardMenu extends Component {\r\n    style = {\r\n        \r\n    }\r\n    \r\n    render(){\r\n        if (this.props.quotes['Andy'] && this.props.images){\r\n            return (\r\n            <ScrollMenu\r\n                data={this.getCards()}\r\n                arrowLeft={ArrowLeft}\r\n                arrowRight={ArrowRight}\r\n                selected={this.props.selected}\r\n                onSelect={this.onSelect}\r\n                menuStyle={this.style}\r\n            />);\r\n        } else {\r\n            return <LoadingScreen />;\r\n        }\r\n    }\r\n\r\n    getCards(){\r\n        return (\r\n        this.props.images.map(url => {\r\n            let name = extractName(url);\r\n            return (  \r\n            <div key = {name} onDragStart={(e)=> e.preventDefault()}>\r\n                <ReactCardFlip isFlipped = {this.props.isCardFlipped}>\r\n                    <div key='front'>\r\n                        <img src = {url} alt = {name} id = 'front'/>\r\n                    </div>\r\n                    <div key='back'>\r\n                        <QuoteCard quotes = {this.props.quotes[name]} />\r\n                    </div>\r\n                </ReactCardFlip>\r\n            </div> )})\r\n        );\r\n    }\r\n\r\n    handleClick(e){\r\n        e.preventDefault();\r\n    }\r\n    \r\n    componentDidMount(){\r\n        this.props.fetchQuotes('https://raw.githubusercontent.com/anderskristo/the-office-quotes/master/src/quotes/all.json', \r\n        'https://raw.githubusercontent.com/yoscheherazade/the-office-quotes-json/master/quotes.json');\r\n        this.props.getImages();\r\n    }\r\n}\r\n\r\nfunction extractName(url){\r\n    let fileName = url.substr(url.lastIndexOf('/') + 1);\r\n    let name = fileName.substr(0, fileName.indexOf('.'));\r\n    return name;\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    quotes:         state.quotes.data,\r\n    images:         state.images.data,\r\n    isCardFlipped:  state.cards.isFlipped,\r\n    selected: state.cards.selected\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => \r\n    bindActionCreators(\r\n        {\r\n            fetchQuotes,\r\n            getImages,\r\n            flipCard,\r\n            onSelect\r\n        },\r\n        dispatch\r\n    );\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CardMenu);"]},"metadata":{},"sourceType":"module"}