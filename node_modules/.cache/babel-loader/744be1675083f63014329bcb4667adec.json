{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\Elija\\\\Projects\\\\quote-generator\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\Elija\\\\Projects\\\\quote-generator\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"C:\\\\Users\\\\Elija\\\\Projects\\\\quote-generator\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"C:\\\\Users\\\\Elija\\\\Projects\\\\quote-generator\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _inherits from\"C:\\\\Users\\\\Elija\\\\Projects\\\\quote-generator\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React,{Component}from'react';import{bindActionCreators}from'redux';import{connect}from'react-redux';import'../stylesheets/style.css';import{fetchQuotes,getImages,onSelect}from'../actions/index';import QuoteCard from'./QuoteCard';import ScrollMenu from'react-horizontal-scrolling-menu';import LoadingScreen from'./LoadingScreen';import ReactCardFlip from'react-card-flip';import{ArrowLeft,ArrowRight}from'./Arrow';export var CardMenu=/*#__PURE__*/function(_Component){_inherits(CardMenu,_Component);function CardMenu(){_classCallCheck(this,CardMenu);return _possibleConstructorReturn(this,_getPrototypeOf(CardMenu).apply(this,arguments));}_createClass(CardMenu,[{key:\"render\",value:function render(){if(this.props.quotes&&this.props.images){return React.createElement(\"div\",{id:\"menu\"},React.createElement(ScrollMenu,{data:this.getCards(),arrowLeft:ArrowLeft,arrowRight:ArrowRight,selected:this.props.selected,onSelect:this.props.onSelect,scrollToSelected:true,wheel:false}));}else{return React.createElement(LoadingScreen,null);}}},{key:\"getCards\",value:function getCards(){var _this=this;return this.props.images.map(function(url){var name=extractName(url);return React.createElement(\"div\",{key:name,onDragStart:function onDragStart(e){return e.preventDefault();},className:\"card\"},React.createElement(ReactCardFlip,{isFlipped:_this.props.selected===name,infinite:true},React.createElement(\"div\",{key:\"front\"},React.createElement(\"img\",{src:url,alt:name,className:\"front\"})),React.createElement(\"div\",{key:\"back\"},React.createElement(QuoteCard,{quotes:_this.props.quotes[name],className:\"back\",author:name}))));});}},{key:\"componentDidMount\",value:function componentDidMount(){this.props.fetchQuotes();this.props.getImages();}}]);return CardMenu;}(Component);function extractName(url){var fileName=url.substr(url.lastIndexOf('/')+1);var name=fileName.substr(0,fileName.indexOf('.'));return name;}var mapStateToProps=function mapStateToProps(state){return{quotes:state.quotes.quotes,images:state.images.data,selected:state.cards.key};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return bindActionCreators({fetchQuotes:fetchQuotes,getImages:getImages,onSelect:onSelect},dispatch);};export default connect(mapStateToProps,mapDispatchToProps)(CardMenu);","map":{"version":3,"sources":["C:/Users/Elija/Projects/quote-generator/src/components/CardMenu.js"],"names":["React","Component","bindActionCreators","connect","fetchQuotes","getImages","onSelect","QuoteCard","ScrollMenu","LoadingScreen","ReactCardFlip","ArrowLeft","ArrowRight","CardMenu","props","quotes","images","getCards","selected","map","url","name","extractName","e","preventDefault","fileName","substr","lastIndexOf","indexOf","mapStateToProps","state","data","cards","key","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport '../stylesheets/style.css';\r\nimport { fetchQuotes, getImages, onSelect} from '../actions/index';\r\nimport QuoteCard from './QuoteCard';\r\nimport ScrollMenu from 'react-horizontal-scrolling-menu';\r\nimport LoadingScreen from './LoadingScreen';\r\nimport ReactCardFlip from 'react-card-flip';\r\nimport {ArrowLeft, ArrowRight} from './Arrow';\r\n\r\nexport class CardMenu extends Component {\r\n    render(){\r\n        if (this.props.quotes && this.props.images){\r\n            return (\r\n            <div id='menu'>\r\n                <ScrollMenu\r\n                    data={this.getCards()}\r\n                    arrowLeft={ArrowLeft}\r\n                    arrowRight={ArrowRight}\r\n                    selected={this.props.selected}\r\n                    onSelect={this.props.onSelect}\r\n                    scrollToSelected={true}\r\n                    wheel = {false}/>\r\n            </div>);\r\n        } else {\r\n            return <LoadingScreen />;\r\n        }\r\n    }\r\n\r\n    getCards(){\r\n        return (\r\n        this.props.images.map(url => {\r\n            let name = extractName(url);\r\n            return (  \r\n            <div key = {name} onDragStart={(e)=> e.preventDefault()} className='card'>\r\n                <ReactCardFlip isFlipped = {this.props.selected === name} infinite = {true}>\r\n                    <div key='front'>\r\n                        <img src = {url} alt = {name} className='front'/>\r\n                    </div>\r\n                    <div key='back'>\r\n                        <QuoteCard quotes = {this.props.quotes[name]} className='back' author={name}/>\r\n                    </div>\r\n                </ReactCardFlip>\r\n            </div>)})\r\n        );\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.fetchQuotes();\r\n        this.props.getImages();\r\n    }\r\n}\r\n\r\nfunction extractName(url){\r\n    let fileName = url.substr(url.lastIndexOf('/') + 1);\r\n    let name = fileName.substr(0, fileName.indexOf('.'));\r\n    return name;\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    quotes:         state.quotes.quotes,\r\n    images:         state.images.data,\r\n    selected:       state.cards.key\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => \r\n    bindActionCreators(\r\n        {\r\n            fetchQuotes,\r\n            getImages,\r\n            onSelect\r\n        },\r\n        dispatch\r\n    );\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CardMenu);"]},"metadata":{},"sourceType":"module"}