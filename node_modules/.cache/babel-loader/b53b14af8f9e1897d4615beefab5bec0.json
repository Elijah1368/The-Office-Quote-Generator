{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elija\\\\Projects\\\\quote-generator\\\\src\\\\components\\\\CardMenu.js\";\nimport React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport '../stylesheets/style.css';\nimport { fetchQuotes, getImages, onSelect } from '../actions/index';\nimport QuoteCard from './QuoteCard';\nimport ScrollMenu from 'react-horizontal-scrolling-menu';\nimport LoadingScreen from './LoadingScreen';\nimport ReactCardFlip from 'react-card-flip';\nimport { ArrowLeft, ArrowRight } from './Arrow';\nexport class CardMenu extends Component {\n  render() {\n    if (this.props.quotes && this.props.images) {\n      return React.createElement(\"div\", {\n        id: \"menu\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, React.createElement(ScrollMenu, {\n        data: this.getCards(),\n        arrowLeft: ArrowLeft,\n        arrowRight: ArrowRight,\n        selected: this.props.selected,\n        onSelect: this.props.onSelect,\n        scrollToSelected: true,\n        wheel: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(LoadingScreen, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      });\n    }\n  }\n  /*\r\n     render(){\r\n      if (this.props.quotes && this.props.images){\r\n          return (\r\n          <div id='menu'>\r\n              {this.getCards()}\r\n          </div>);\r\n      } else {\r\n          return <LoadingScreen />;\r\n      }\r\n  }\r\n      */\n\n\n  getCards() {\n    return this.props.images.map(url => {\n      let name = extractName(url);\n      return React.createElement(\"div\", {\n        key: name,\n        onDragStart: e => e.preventDefault(),\n        className: \"card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(ReactCardFlip, {\n        isFlipped: this.props.selected === name,\n        infinite: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        key: \"front\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: url,\n        alt: name,\n        className: \"front\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        key: \"back\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(QuoteCard, {\n        quotes: this.props.quotes[name],\n        className: \"back\",\n        author: name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }))));\n    });\n  }\n\n  componentDidMount() {\n    this.props.fetchQuotes();\n    this.props.getImages();\n  }\n\n}\n\nfunction extractName(url) {\n  let fileName = url.substr(url.lastIndexOf('/') + 1);\n  let name = fileName.substr(0, fileName.indexOf('.'));\n  return name;\n}\n\nconst mapStateToProps = state => ({\n  quotes: state.quotes.quotes,\n  images: state.images.data,\n  selected: state.cards.key\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  fetchQuotes,\n  getImages,\n  onSelect\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardMenu);","map":{"version":3,"sources":["C:/Users/Elija/Projects/quote-generator/src/components/CardMenu.js"],"names":["React","Component","bindActionCreators","connect","fetchQuotes","getImages","onSelect","QuoteCard","ScrollMenu","LoadingScreen","ReactCardFlip","ArrowLeft","ArrowRight","CardMenu","render","props","quotes","images","getCards","selected","map","url","name","extractName","e","preventDefault","componentDidMount","fileName","substr","lastIndexOf","indexOf","mapStateToProps","state","data","cards","key","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport '../stylesheets/style.css';\r\nimport { fetchQuotes, getImages, onSelect} from '../actions/index';\r\nimport QuoteCard from './QuoteCard';\r\nimport ScrollMenu from 'react-horizontal-scrolling-menu';\r\nimport LoadingScreen from './LoadingScreen';\r\nimport ReactCardFlip from 'react-card-flip';\r\nimport {ArrowLeft, ArrowRight} from './Arrow';\r\n\r\nexport class CardMenu extends Component {\r\n    \r\n    render(){\r\n        if (this.props.quotes && this.props.images){\r\n            return (\r\n            <div id='menu'>\r\n                \r\n                <ScrollMenu\r\n                    data={this.getCards()}\r\n                    arrowLeft={ArrowLeft}\r\n                    arrowRight={ArrowRight}\r\n                    selected={this.props.selected}\r\n                    onSelect={this.props.onSelect}\r\n                    scrollToSelected={true}\r\n                    wheel = {false}/>\r\n            </div>);\r\n        } else {\r\n            return <LoadingScreen />;\r\n        }\r\n    }\r\n/*\r\n   render(){\r\n    if (this.props.quotes && this.props.images){\r\n        return (\r\n        <div id='menu'>\r\n            {this.getCards()}\r\n        </div>);\r\n    } else {\r\n        return <LoadingScreen />;\r\n    }\r\n}\r\n    */\r\n    getCards(){\r\n        return (\r\n        this.props.images.map(url => {\r\n            let name = extractName(url);\r\n            return (  \r\n            <div key = {name} onDragStart={(e)=> e.preventDefault()} className='card'>\r\n                <ReactCardFlip isFlipped = {this.props.selected === name} infinite = {true}>\r\n                    <div key='front'>\r\n                        <img src = {url} alt = {name} className='front'/>\r\n                    </div>\r\n                    <div key='back'>\r\n                        <QuoteCard quotes = {this.props.quotes[name]} className='back' author={name}/>\r\n                    </div>\r\n                </ReactCardFlip>\r\n            </div>)})\r\n        );\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.fetchQuotes();\r\n        this.props.getImages();\r\n    }\r\n}\r\n\r\nfunction extractName(url){\r\n    let fileName = url.substr(url.lastIndexOf('/') + 1);\r\n    let name = fileName.substr(0, fileName.indexOf('.'));\r\n    return name;\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    quotes:         state.quotes.quotes,\r\n    images:         state.images.data,\r\n    selected:       state.cards.key\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => \r\n    bindActionCreators(\r\n        {\r\n            fetchQuotes,\r\n            getImages,\r\n            onSelect\r\n        },\r\n        dispatch\r\n    );\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CardMenu);"]},"metadata":{},"sourceType":"module"}