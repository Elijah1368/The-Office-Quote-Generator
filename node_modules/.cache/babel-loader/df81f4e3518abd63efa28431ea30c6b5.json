{"ast":null,"code":"import { FETCH_QUOTES, NEW_QUOTE, LOAD_ASSETS } from '../constants';\nexport const fetchQuotes = (...urls) => dispatch => {\n  let officeQuotes = {};\n\n  for (let url of urls) {\n    fetch(url).then(response => {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n\n      return response.json();\n    }).then(data => {\n      Object.assign(officeQuotes, addQuotes({}, data));\n      console.log(`result: ${officeQuotes['Michael Scott']}`);\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  console.log(`result: ${officeQuotes['Michael Scott']}`);\n  dispatch({\n    type: FETCH_QUOTES,\n    payload: officeQuotes\n  });\n};\nexport const newQuote = name => {\n  return {\n    type: NEW_QUOTE\n  };\n};\n\nfunction addQuotes(container, quotes) {\n  let result = {\n    container\n  };\n  quotes.map(quote => {\n    let key = nameOrCharacter(quote);\n\n    if (result.hasOwnProperty(quote[key])) {\n      result[quote[key]].push(quote.quote);\n    } else {\n      result[quote[key]] = [quote.quote];\n    }\n  });\n  return result;\n}\n\nfunction nameOrCharacter(quote) {\n  if (quote.hasOwnProperty('name')) {\n    return 'name';\n  } else {\n    return 'character';\n  }\n}","map":{"version":3,"sources":["C:/Users/Elija/Projects/quote-generator/random-quote-generator/src/actions/index.js"],"names":["FETCH_QUOTES","NEW_QUOTE","LOAD_ASSETS","fetchQuotes","urls","dispatch","officeQuotes","url","fetch","then","response","ok","Error","statusText","json","data","Object","assign","addQuotes","console","log","catch","error","type","payload","newQuote","name","container","quotes","result","map","quote","key","nameOrCharacter","hasOwnProperty","push"],"mappings":"AAAA,SAAQA,YAAR,EAAsBC,SAAtB,EAAiCC,WAAjC,QAAmD,cAAnD;AAGA,OAAO,MAAMC,WAAW,GAAG,CAAC,GAAGC,IAAJ,KAAaC,QAAQ,IAAI;AAChD,MAAIC,YAAY,GAAG,EAAnB;;AACA,OAAK,IAAIC,GAAT,IAAgBH,IAAhB,EAAqB;AACjBI,IAAAA,KAAK,CAACD,GAAD,CAAL,CACCE,IADD,CACMC,QAAQ,IAAI;AACd,UAAI,CAACA,QAAQ,CAACC,EAAd,EAAiB;AACb,cAAMC,KAAK,CAACF,QAAQ,CAACG,UAAV,CAAX;AACH;;AACD,aAAOH,QAAQ,CAACI,IAAT,EAAP;AACH,KAND,EAOCL,IAPD,CAOMM,IAAI,IAAI;AACVC,MAAAA,MAAM,CAACC,MAAP,CAAcX,YAAd,EAA4BY,SAAS,CAAC,EAAD,EAAKH,IAAL,CAArC;AAERI,MAAAA,OAAO,CAACC,GAAR,CAAa,WAAUd,YAAY,CAAC,eAAD,CAAkB,EAArD;AACK,KAXD,EAYCe,KAZD,CAYOC,KAAK,IAAG;AACXH,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACH,KAdD;AAeH;;AAEDH,EAAAA,OAAO,CAACC,GAAR,CAAa,WAAUd,YAAY,CAAC,eAAD,CAAkB,EAArD;AACAD,EAAAA,QAAQ,CAAC;AAACkB,IAAAA,IAAI,EAAEvB,YAAP;AAAqBwB,IAAAA,OAAO,EAAElB;AAA9B,GAAD,CAAR;AACH,CAtBM;AAwBP,OAAO,MAAMmB,QAAQ,GAAIC,IAAD,IAAU;AAC9B,SAAO;AACHH,IAAAA,IAAI,EAAEtB;AADH,GAAP;AAGH,CAJM;;AAMP,SAASiB,SAAT,CAAmBS,SAAnB,EAA8BC,MAA9B,EAAqC;AACjC,MAAIC,MAAM,GAAG;AAACF,IAAAA;AAAD,GAAb;AACAC,EAAAA,MAAM,CAACE,GAAP,CAAWC,KAAK,IAAI;AAChB,QAAIC,GAAG,GAAGC,eAAe,CAACF,KAAD,CAAzB;;AACA,QAAIF,MAAM,CAACK,cAAP,CAAsBH,KAAK,CAACC,GAAD,CAA3B,CAAJ,EAAsC;AAClCH,MAAAA,MAAM,CAACE,KAAK,CAACC,GAAD,CAAN,CAAN,CAAmBG,IAAnB,CAAwBJ,KAAK,CAACA,KAA9B;AACH,KAFD,MAEO;AACHF,MAAAA,MAAM,CAACE,KAAK,CAACC,GAAD,CAAN,CAAN,GAAqB,CAACD,KAAK,CAACA,KAAP,CAArB;AACH;AACJ,GAPD;AASA,SAAOF,MAAP;AACH;;AAED,SAASI,eAAT,CAAyBF,KAAzB,EAA+B;AAC3B,MAAIA,KAAK,CAACG,cAAN,CAAqB,MAArB,CAAJ,EAAiC;AAC7B,WAAO,MAAP;AACH,GAFD,MAEO;AACH,WAAO,WAAP;AACH;AACJ","sourcesContent":["import {FETCH_QUOTES, NEW_QUOTE, LOAD_ASSETS} from '../constants';\r\n\r\n\r\nexport const fetchQuotes = (...urls) => dispatch => {\r\n    let officeQuotes = {};\r\n    for (let url of urls){\r\n        fetch(url)\r\n        .then(response => {\r\n            if (!response.ok){\r\n                throw Error(response.statusText);\r\n            }\r\n            return response.json();\r\n        })\r\n        .then(data => {\r\n            Object.assign(officeQuotes, addQuotes({}, data));\r\n            \r\n    console.log(`result: ${officeQuotes['Michael Scott']}`);\r\n        })\r\n        .catch(error=> {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    console.log(`result: ${officeQuotes['Michael Scott']}`);\r\n    dispatch({type: FETCH_QUOTES, payload: officeQuotes});\r\n};\r\n\r\nexport const newQuote = (name) => {\r\n    return {\r\n        type: NEW_QUOTE\r\n    }\r\n};\r\n\r\nfunction addQuotes(container, quotes){\r\n    let result = {container};\r\n    quotes.map(quote => {\r\n        let key = nameOrCharacter(quote);\r\n        if (result.hasOwnProperty(quote[key])){\r\n            result[quote[key]].push(quote.quote);\r\n        } else {\r\n            result[quote[key]] = [quote.quote];\r\n        }\r\n    });\r\n\r\n    return result\r\n}\r\n\r\nfunction nameOrCharacter(quote){\r\n    if (quote.hasOwnProperty('name')){\r\n        return 'name';\r\n    } else {\r\n        return 'character';\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}