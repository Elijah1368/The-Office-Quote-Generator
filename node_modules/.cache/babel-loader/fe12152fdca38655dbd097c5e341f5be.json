{"ast":null,"code":"import Andy from '../assets/Andy.png';\nimport Angela from '../assets/Angela.png';\nimport Dwight from '../assets/Dwight.png';\nimport Jim from '../assets/Jim.png';\nimport Kelly from '../assets/Kelly.png';\nimport Michael from '../assets/Michael.png';\nimport Pam from '../assets/Pam.png';\nimport Stanley from '../assets/Stanley.png';\nexport const fetchQuotes = (...urls) => dispatch => {\n  let promises = gatherPromises(urls);\n  dispatchPromises(dispatch, promises);\n};\nexport const getImages = () => dispatch => {\n  let images = [Andy, Angela, Dwight, Jim, Kelly, Michael, Pam, Stanley];\n  dispatch({\n    type: 'GET_IMAGES',\n    payload: images\n  });\n};\nexport const onSelect = key => dispatch => {\n  dispatch({\n    type: 'SELECT',\n    payload: key\n  });\n};\nexport const newQuote = name => dispatch => {\n  dispatch({\n    type: 'NEW_QUOTE',\n    payload: quotes[Math.floor(Math.random() * quotes.length)]\n  });\n};\n\nfunction dispatchPromises(dispatch, promises) {\n  Promise.all(promises).then(results => {\n    let payload = results.reduce((accumulator, val) => Object.assign(accumulator, val));\n    dispatch({\n      type: 'FETCH_QUOTES',\n      payload\n    });\n  });\n}\n\nfunction gatherPromises(urls) {\n  let promises = [];\n  urls.map(url => promises.push(asyncFetch(url)));\n  return promises;\n}\n\nfunction asyncFetch(url) {\n  return fetch(url).then(response => {\n    if (!response.ok) throw Error(response.statusText);\n    return response.json();\n  }).then(data => {\n    return listToObject(data);\n  }).catch(error => {\n    console.log(error);\n  });\n}\n\nfunction listToObject(quotes) {\n  let result = {};\n  quotes.map(quote => {\n    let key = nameOrCharacter(quote);\n    let property = quote[key].substr(0, quote[key].indexOf(' '));\n\n    if (result.hasOwnProperty(property)) {\n      return result[property].push(quote.quote);\n    } else {\n      return result[property] = {\n        current: \"\",\n        quotes: [quote.quote]\n      };\n    }\n  });\n  result = getInitialQuotes(result);\n  return result;\n}\n\nfunction getInitialQuotes(quotes) {\n  let result = {\n    quotes\n  };\n  Object.keys(result).map(key => {\n    return result[key].current = result[key].quotes[Math.floor(Math.random() * result[key].quotes.length)];\n  });\n  return result;\n}\n\nfunction nameOrCharacter(quote) {\n  if (quote.hasOwnProperty('name')) {\n    return 'name';\n  } else {\n    return 'character';\n  }\n}","map":{"version":3,"sources":["C:/Users/Elija/Projects/quote-generator/src/actions/index.js"],"names":["Andy","Angela","Dwight","Jim","Kelly","Michael","Pam","Stanley","fetchQuotes","urls","dispatch","promises","gatherPromises","dispatchPromises","getImages","images","type","payload","onSelect","key","newQuote","name","quotes","Math","floor","random","length","Promise","all","then","results","reduce","accumulator","val","Object","assign","map","url","push","asyncFetch","fetch","response","ok","Error","statusText","json","data","listToObject","catch","error","console","log","result","quote","nameOrCharacter","property","substr","indexOf","hasOwnProperty","current","getInitialQuotes","keys"],"mappings":"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","sourcesContent":["import Andy from '../assets/Andy.png';\r\nimport Angela from '../assets/Angela.png';\r\nimport Dwight from '../assets/Dwight.png';\r\nimport Jim from '../assets/Jim.png';\r\nimport Kelly from '../assets/Kelly.png';\r\nimport Michael from '../assets/Michael.png';\r\nimport Pam from '../assets/Pam.png';\r\nimport Stanley from '../assets/Stanley.png';\r\n\r\nexport const fetchQuotes = (...urls) => dispatch => {\r\n    let promises = gatherPromises(urls);\r\n    dispatchPromises(dispatch, promises);\r\n};\r\n\r\nexport const getImages = () => dispatch => {\r\n    let images = [Andy, Angela, Dwight, Jim, Kelly, Michael, Pam, Stanley];\r\n    dispatch({type: 'GET_IMAGES', payload: images});\r\n}\r\n\r\nexport const onSelect = (key) => dispatch => {\r\n    dispatch({type: 'SELECT', payload: key});\r\n}\r\n\r\nexport const newQuote = (name) => dispatch => {\r\n    dispatch({type: 'NEW_QUOTE', payload: quotes[Math.floor(Math.random() * quotes.length)]});\r\n}\r\n\r\nfunction dispatchPromises(dispatch, promises){\r\n    Promise.all(promises).then((results) =>{\r\n        let payload = results.reduce((accumulator, val) => Object.assign(accumulator, val));\r\n        dispatch({type: 'FETCH_QUOTES', payload});\r\n    })\r\n}\r\n\r\nfunction gatherPromises(urls){\r\n    let promises = [];\r\n    urls.map((url) => promises.push(asyncFetch(url)));\r\n    return promises;\r\n}\r\n\r\nfunction asyncFetch(url){\r\n    return (\r\n        fetch(url)\r\n        .then(response => {\r\n            if (!response.ok) throw Error(response.statusText);\r\n            return response.json();\r\n        })\r\n        .then(data => {\r\n            return listToObject(data);\r\n        })\r\n        .catch(error=> {\r\n            console.log(error);\r\n        })\r\n    );\r\n}\r\n\r\nfunction listToObject(quotes){\r\n    let result = {};\r\n    quotes.map(quote => {\r\n        let key = nameOrCharacter(quote);\r\n        let property = quote[key].substr(0, quote[key].indexOf(' '));\r\n        if (result.hasOwnProperty(property)){\r\n            return result[property].push(quote.quote);\r\n        } else {\r\n            return result[property] = {current: \"\", quotes:[quote.quote]};\r\n        }\r\n    });\r\n    result = getInitialQuotes(result);\r\n    return result\r\n}\r\n\r\nfunction getInitialQuotes(quotes){\r\n    let result = {quotes};\r\n    Object.keys(result).map((key) => {\r\n        return result[key].current = result[key].quotes[Math.floor(Math.random() * result[key].quotes.length)];\r\n    });\r\n    return result;\r\n}\r\n\r\nfunction nameOrCharacter(quote){\r\n    if (quote.hasOwnProperty('name')){\r\n        return 'name';\r\n    } else {\r\n        return 'character';\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}